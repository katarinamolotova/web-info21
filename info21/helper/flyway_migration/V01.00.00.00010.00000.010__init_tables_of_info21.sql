DROP TABLE IF EXISTS peers CASCADE;
CREATE TABLE peers (
    nickname VARCHAR PRIMARY KEY,
    birthday DATE NOT NULL
);

DROP TABLE IF EXISTS tasks CASCADE;
CREATE TABLE tasks (
    title       VARCHAR PRIMARY KEY,
    parent_task VARCHAR,
    max_xp      INTEGER NOT NULL DEFAULT 100,
    CONSTRAINT fk_tasks_parent_task FOREIGN KEY (parent_task) REFERENCES tasks (title) ON DELETE CASCADE
);

CREATE TYPE check_status AS ENUM ('start', 'success', 'failure');

DROP TABLE IF EXISTS checks CASCADE;
CREATE TABLE checks (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    peer       VARCHAR NOT NULL,
    task       VARCHAR NOT NULL,
    check_date DATE NOT NULL,
    CONSTRAINT fk_checks_peer FOREIGN KEY (peer) REFERENCES peers (nickname) ON DELETE CASCADE,
    CONSTRAINT fk_checks_task FOREIGN KEY (task) REFERENCES tasks (title) ON DELETE CASCADE
);

DROP TABLE IF EXISTS p2p CASCADE;
CREATE TABLE p2p (
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    check_id      INTEGER NOT NULL,
    checking_peer VARCHAR NOT NULL,
    state         check_status,
    check_time    TIME WITHOUT TIME ZONE,
    CONSTRAINT fk_p2p_check_id FOREIGN KEY (check_id) REFERENCES checks (id) ON DELETE CASCADE,
    CONSTRAINT fk_p2p_checking_peer FOREIGN KEY (checking_peer) REFERENCES peers (nickname) ON DELETE CASCADE
);

-- В таблице не может быть больше одной незавершенной P2P проверки, относящейся к
-- конкретному заданию, пиру и проверяющему.
-- Каждая P2P проверка (т.е. обе записи, из которых она состоит) ссылается на проверку
-- в таблице Checks, к которой она относится.

DROP TABLE IF EXISTS verter CASCADE;
CREATE TABLE verter (
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    check_id    INTEGER NOT NULL,
    state       check_status,
    verter_time TIME WITHOUT TIME ZONE,
    CONSTRAINT fk_verter_check_id FOREIGN KEY (check_id) REFERENCES checks (id) ON DELETE CASCADE
);

-- Проверка Verter'ом может ссылаться только на те проверки в таблице Checks,
-- которые уже включают в себя успешную P2P проверку.

DROP TABLE IF EXISTS transferred_points CASCADE;
CREATE TABLE transferred_points (
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    checking_peer VARCHAR NOT NULL,
    checked_peer  VARCHAR NOT NULL,
    points_amount INTEGER NOT NULL default 0,
    CONSTRAINT fk_transferred_points_checking_peer FOREIGN KEY (checking_peer) REFERENCES peers (nickname) ON DELETE CASCADE,
    CONSTRAINT fk_transferred_points_checked_peer FOREIGN KEY (checked_peer) REFERENCES peers (nickname) ON DELETE CASCADE
);

DROP TABLE IF EXISTS friends CASCADE;
CREATE TABLE friends (
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    peer1 VARCHAR NOT NULL,
    peer2 VARCHAR NOT NULL,
    CONSTRAINT fk_friends_peer1 FOREIGN KEY (peer1) REFERENCES peers (nickname) ON DELETE CASCADE,
    CONSTRAINT fk_friends_peer2 FOREIGN KEY (peer2) REFERENCES peers (nickname) ON DELETE CASCADE
);

DROP TABLE IF EXISTS recommendations CASCADE;
CREATE TABLE recommendations (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    peer             VARCHAR NOT NULL,
    recommended_peer VARCHAR NOT NULL,
    CONSTRAINT fk_friends_peer FOREIGN KEY (peer) REFERENCES peers (nickname) ON DELETE CASCADE,
    CONSTRAINT fk_friends_recommended_peer FOREIGN KEY (recommended_peer) REFERENCES peers (nickname) ON DELETE CASCADE
);

DROP TABLE IF EXISTS xp CASCADE;
CREATE TABLE xp (
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    check_id  INTEGER NOT NULL,
    xp_amount INTEGER NOT NULL default 0,
    CONSTRAINT fk_xp_check_id FOREIGN KEY (check_id) REFERENCES checks (id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS time_tracking CASCADE;
CREATE TABLE time_tracking (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    peer       VARCHAR NOT NULL,
    visit_date DATE NOT NULL,
    visit_time TIME WITHOUT TIME ZONE,
    state      INTEGER NOT NULL default 1,
    CONSTRAINT fk_time_tracking_peer FOREIGN KEY (peer) REFERENCES peers (nickname) ON DELETE CASCADE,
    CONSTRAINT ch_state check (state IN (1, 2))
);

SET datestyle = 'Euro';
